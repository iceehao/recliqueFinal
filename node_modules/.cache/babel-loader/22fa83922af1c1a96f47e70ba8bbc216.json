{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\iceha\\\\Desktop\\\\RecliqueFinalVersion\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Steps } from \"antd\";\nimport Questionare from \"./Questionare\";\nconst {\n  Step\n} = Steps;\n\nconst App = () => {\n  _s();\n\n  const [current, setCurrent] = React.useState(0); // set current value to move on next step\n\n  const [steps, setSteps] = useState([]);\n\n  const next = i => {\n    setCurrent(i + 1); // increment in current to move on\n\n    console.log(\"length:\", steps.length);\n    console.log(\"steps\", steps);\n    console.log(\"moving\", i + 1);\n  };\n\n  const getAllQuestions = async () => {\n    // api call to get question & answers array\n    const res = await fetch(\"https://iceehao.github.io/JsonDataRevised/\");\n    const data = await res.json(); // log api data on console\n\n    console.log(data); // declare empty array to store steps\n\n    const step = [];\n    data.forEach((question, i) => {\n      // store steps in empty array\n      step.push({\n        title: question.title,\n        content: /*#__PURE__*/_jsxDEV(Questionare, {\n          description: question.description,\n          onFinish: it => {\n            console.log(it); // if condition to check last index an notify if quiz is finished\n\n            if (data.length - 1 == it) {\n              alert(\"Quiz finished\"); // it will restart app if quiz is finished\n\n              window.location.reload(false);\n            } // if condition is false then move to next step\n            else {\n                next(it);\n                console.log(\"agy gyaa ha\");\n              }\n\n            console.log(\"end\");\n          },\n          answer: question.correct_answers,\n          length: data.length,\n          index: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      });\n    }); // set steps in state for further use\n\n    setSteps(step);\n  };\n\n  useEffect(() => {\n    // function for api call\n    getAllQuestions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-contaner\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hao Tran Quiz Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), steps.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Steps, {\n        current: current,\n        children: steps.map(item => /*#__PURE__*/_jsxDEV(Step, {\n          title: item.title\n        }, item.title, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: steps[current].content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"JpIV1i8irTYtf9zkIwpt6wqY7pU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/iceha/Desktop/RecliqueFinalVersion/src/App.js"],"names":["React","useEffect","useState","Steps","Questionare","Step","App","current","setCurrent","steps","setSteps","next","i","console","log","length","getAllQuestions","res","fetch","data","json","step","forEach","question","push","title","content","description","it","alert","window","location","reload","correct_answers","map","item"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Steps } from \"antd\";\nimport Questionare from \"./Questionare\";\n\nconst { Step } = Steps;\n\nconst App = () => {\n  const [current, setCurrent] = React.useState(0); // set current value to move on next step\n  const [steps, setSteps] = useState([]);\n\n  const next = (i) => {\n    setCurrent(i + 1); // increment in current to move on\n    console.log(\"length:\", steps.length);\n    console.log(\"steps\", steps);\n    console.log(\"moving\", i + 1);\n  };\n\n  const getAllQuestions = async () => {\n    // api call to get question & answers array\n    const res = await fetch(\"https://iceehao.github.io/JsonDataRevised/\");\n    const data = await res.json();\n    // log api data on console\n    console.log(data);\n    // declare empty array to store steps\n    const step = [];\n\n    data.forEach((question, i) => {\n      // store steps in empty array\n      step.push({\n        title: question.title,\n        content: (\n          <Questionare\n            description={question.description}\n            onFinish={(it) => {\n              console.log(it);\n              // if condition to check last index an notify if quiz is finished\n              if (data.length - 1 == it) {\n                alert(\"Quiz finished\");\n                // it will restart app if quiz is finished\n                window.location.reload(false);\n              }\n              // if condition is false then move to next step\n              else {\n                next(it);\n                console.log(\"agy gyaa ha\");\n              }\n              console.log(\"end\");\n            }}\n            answer={question.correct_answers}\n            length={data.length}\n            index={i}\n          />\n        ),\n      });\n    });\n    // set steps in state for further use\n    setSteps(step);\n  };\n\n  useEffect(() => {\n    // function for api call\n    getAllQuestions();\n  }, []);\n\n  return (\n    <div className=\"app-contaner\">\n      <h1>Hao Tran Quiz Project</h1>\n      <br />\n      {/* // check steps length to display content */}\n      {steps.length > 0 && (\n        <>\n          <Steps current={current}>\n            {steps.map((item) => (\n              <Step key={item.title} title={item.title} />\n            ))}\n          </Steps>\n          <div className=\"\">{steps[current].content}</div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}